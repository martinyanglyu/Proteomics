subtype_color=cbp1[c(1,2,3)]
names(subtype_color)=c("1","2","3")
P1=UMAP_plot(Data_umap=sig_pathways_umap,shape_label="",color_label="Cluster",color_defination=subtype_color)
subtype_color=cbp1[c(3,5)]
names(subtype_color)=c("CHKIRC_subtype1","CHKIRC_subtype2")
P2=UMAP_plot(Data_umap=sig_pathways_umap,shape_label="",color_label="Subtype",color_defination=subtype_color)
cowplot::plot_grid(cluster_OUT, P1,nrow=1)
Subtype1_ID=sig_pathways_umap%>%dplyr::filter(Subtype=="CHKIRC_subtype1")%>%.$Sample_ID
Subtype2_ID=sig_pathways_umap%>%dplyr::filter(Subtype=="CHKIRC_subtype2")%>%.$Sample_ID
Diff_pathways=Wilcox_test_singscore(KIRC_singscore_data,Subtype1_ID,Subtype2_ID)
Diff_pathways_p005=Diff_pathways %>%dplyr::filter(pvalue<0.05)
clinical_subtype=clinical_54_data_2%>%left_join(.,sig_pathways_umap[,c("Sample_ID","Subtype")])
write.csv(clinical_subtype,file.path(Out_table_path,"CHKIRC_subtype_clinial.csv"))
cat("Up pathways in Type2 vs Type1,TGF-beta: EMT,FOCAL_ADHESION,MYOGENESIS,COMPLEMENT,PI3KAKT,MTOR, save in Upregulated pathways in CHKIRC_subtype2 vs 1.csv\n" )
cat( "DN pathways: GLYCOLYSIS_AND_GLUCONEOGENESIS,FATTY_ACID_BETAOXIDATION,LONG_CHAIN_FATTY_ACID_BETAOXIDATION,HALLMARK_DNA_REPAIR in DNregulated pathways in CHKIRC_subtype2 vs 1.csv")
Diff_pathways_Hallmark_up=Diff_pathways_p005%>%dplyr::filter(log2FoldChange>0) %>%dplyr::filter(grepl("HALLMARK|WP_",SYMBOL))%>%arrange(pvalue)
write.csv(Diff_pathways_Hallmark_up,file.path(Out_table_path,"Table1,Upregulated pathways in CHKIRC_subtype2 vs 1.csv"))
Diff_pathways_Hallmark_DN=Diff_pathways_p005%>%dplyr::filter(log2FoldChange<0) %>%dplyr::filter(grepl("HALLMARK|WP_",SYMBOL))%>%arrange(pvalue)
write.csv(Diff_pathways_Hallmark_DN,file.path(Out_table_path,"Table2,DNregulated pathways in CHKIRC_subtype2 vs 1.csv"))
Compare_list=list(c("CHKIRC_subtype1" ,"CHKIRC_subtype2" ))
Subtype_pathways_data=Diff_pathways_p005%>%dplyr::filter(grepl("GLYCOLYSIS|OXIDATION|EPITHELIAL|MTOR|DNA_REPAIR|TGF|MYOGENESIS|COMPLEMENT|PI3K|AKT|PI3KAKT|APOPTOSIS",SYMBOL))%>%dplyr::filter(grepl("HALLMARK|WP_",SYMBOL))%>%arrange(pvalue)
subtype_color=cbp1[c(3,5)]
names(subtype_color)=c("CHKIRC_subtype1","CHKIRC_subtype2")
Subtype_pathways=c("HALLMARK_EPITHELIAL_MESENCHYMAL_TRANSITION" ,"WP_FOCAL_ADHESION_PI3KAKTMTORSIGNALING_PATHWAY","WP_TGFBETA_RECEPTOR_SIGNALING_IN_SKELETAL_DYSPLASIAS","HALLMARK_MYOGENESIS","WP_PI3KAKT_SIGNALING_PATHWAY" ,"WP_COMPLEMENT_SYSTEM" ,"WP_GLYCOLYSIS_AND_GLUCONEOGENESIS"   ,"WP_MITOCHONDRIAL_LONG_CHAIN_FATTY_ACID_BETAOXIDATION"    )
Norm_singscore_anno=KIRC_singscore_data [Subtype_pathways,]%>%t()%>%as.data.frame() %>%dplyr::mutate(Sample_ID=rownames(.))%>%left_join(.,sig_pathways_umap[,c("Sample_ID","Subtype")] )%>%arrange(Subtype)
Norm_singscore_anno$Subtype=factor(Norm_singscore_anno$Subtype,levels=c("CHKIRC_subtype1","CHKIRC_subtype2"))
P3=Batch_singscore_boxplot (Subtype_pathways,Norm_singscore_anno,"Subtype" ,fillby="Subtype",nCol=4,Compare_list,subtype_color )
sig_pathway_anno=Norm_singscore_anno[,c("Sample_ID","Subtype")]%>%matrix.please()%>%as.data.frame()%>%setNames("Subtype")
sig_pathway_anno$Subtype=factor(sig_pathway_anno$Subtype)
Singscore_data_t_select=Norm_singscore_anno[,Subtype_pathways]%>%t()%>%as.data.frame()
colnames(Singscore_data_t_select)=Norm_singscore_anno$Sample_ID
ann_colors=list(Subtype=subtype_color)
PHEATMAP=pheatmap::pheatmap(Singscore_data_t_select,cellwigermline=5, cellheight = 15,cellwidth = 10, scale = "row",
treeheight_row = 5,
show_rownames = T,show_colnames = F,
annotation_col= sig_pathway_anno,
annotation_colors = ann_colors,
# annotation_row=Annotation,
#annotation_legend=Label_def,
cluster_rows = T,  cluster_cols = F,clustering_distance_rows = "euclidean")
Data=KIRC_singscore_data [Subtype_pathways,]%>%t()%>%as.data.frame()
set.seed(12345)
sig_pathways_umap=UMAP_output(Data)%>% left_join(.,Norm_singscore_anno[,c("Sample_ID","Subtype")])
P4=UMAP_plot(Data_umap=sig_pathways_umap,shape_label="",color_label="Subtype",color_defination=subtype_color)
#cowplot::plot_grid(PHEATMAP$gtable,P4,nrow=1,labels = c("A","B"),scale=c(1,0.8))
cowplot::plot_grid(PHEATMAP$gtable,labels = c("A"))
cowplot::plot_grid(P4,grid::nullGrob() ,labels = c("B",""))
cowplot::plot_grid(P3,nrow=1,labels = c("C"))
pheatmap_pathway_3<- function (expression_data, Gene_select,pathway_name,Annotation) {
# Gene_select<-Pathway_list[,pathway_name]%>%unique()
Gene_select_anno= expression_data[Gene_select,]
pheatmap::pheatmap(Gene_select_anno, cellwigermline= 2, cellheight =10, scale = "row",
treeheight_row = 5,main=pathway_name,
show_rownames = T,show_colnames = F,
annotation_col= Annotation,
# annotation_row=Annotation,
#annotation_legend=Label_def,
cluster_rows = T,  cluster_cols = F,clustering_distance_rows = "euclidean")
}
# saved in "CHKIRC_DEPs_in_subtypes.csv
Ttest_Data=Pro_log_data_rm_na
outlist=list()
Type1_ID=sig_pathways_umap[,c("Sample_ID","Subtype")]%>%dplyr::filter(Subtype=="CHKIRC_subtype1")%>%.$Sample_ID
Type2_ID=sig_pathways_umap[,c("Sample_ID","Subtype")]%>%dplyr::filter(Subtype=="CHKIRC_subtype2")%>%.$Sample_ID
#
# for(i in rownames(Ttest_Data)) {
#   data=Ttest_Data[i,Type1_ID]%>%as.numeric()
#   data2=Ttest_Data[i,Type2_ID]%>%as.numeric()
#   TTEST=wilcox.test(data,data2)
#   outlist[[i]]=data.frame(gene_symbol=i,pvalue=TTEST$p.value,log_a=mean(data),log_b=mean(data2))%>%mutate(log2FoldChange=log_b-log_a)
# }
#
#
# Ttest_out=do.call("rbind",outlist)
#
# Ttest_out_sig=Ttest_out%>%dplyr::filter(pvalue<0.05 )%>%dplyr::filter(log2FoldChange>0.67|log2FoldChange<as.numeric(-0.67))
wilcox_list=list()
for(i in rownames(Ttest_Data)) {
data=Ttest_Data[i,Type1_ID]%>%as.numeric()
data2=Ttest_Data[i,Type2_ID]%>%as.numeric()
TTEST=wilcox.test(data,data2)
outlist[[i]]=data.frame(gene_symbol=i,pvalue=TTEST$p.value,log_a=mean(data),log_b=mean(data2))%>%mutate(log2FoldChange=log_b-log_a)
}
wilcox_list_out=do.call("rbind",outlist)
wilcox_test_out_sig=wilcox_list_out%>%dplyr::filter(pvalue<0.05 )%>%dplyr::filter(log2FoldChange>0.26|log2FoldChange<as.numeric(-0.26))
write.csv(wilcox_test_out_sig, file.path(Rawdata_path,"CHKIRC","Proteomics","CHKIRC_DEPs_in_subtypes.csv" ))
Valcano_plot_all_proteins=function(Data,Title){
library(ggrepel)
# add a column of NAs
de=Data %>%mutate(diffexpressed=ifelse(pvalue>0.05|abs(log2FoldChange)<0.26,"NO",ifelse(log2FoldChange>0,"UP","DOWN")))
de$delabel <- NA
de$delabel[de$diffexpressed != "NO"] <- de$gene_symbol[de$diffexpressed != "NO"]
# plot adding up all layers we have seen so far
ggplot(data=de, aes(x=log2FoldChange, y=-log10(pvalue), col=diffexpressed, label=delabel)) +
geom_point() + ggtitle(Title)+
theme_minimal() +xlim(c(-2,2))+
geom_text_repel() +
scale_color_manual(values=c("DOWN"="#18499E", "NO"= "grey","UP"= "#E7211A")) +
geom_vline(xintercept=c(-0.26, 0.26), col="red") +
geom_hline(yintercept=-log10(0.05), col="red")
}
Valcano_plot_all_proteins(wilcox_list_out,"All DEPs in KIRC_type2 vs KIRC_type1")
# plot volcano plot for each pathwau in significant pathways
Pathway_names=Subtype_pathways
plist=list()
for (i in Pathway_names){
Pathway_genes=GSEA_pathway_list[[i]]
Sig_proteins=intersect(Pathway_genes,wilcox_list_out$gene_symbol)
if(length(Sig_proteins)!="0") {
Exp_data=wilcox_list_out%>%dplyr::filter(gene_symbol%in%Sig_proteins)
plist[[i]]=Valcano_plot_NES(Exp_data,i)
}
}
# add title to cowplot
cowplot::plot_grid(plotlist = plist,nrow=4)+
ggtitle("Volcano plot for each pathway in significant pathways") +
theme(plot.title = element_text(hjust = 0.5, size = 20, face = "bold"))
# NES data file "CHKIRC_NES_subtype2_Vs_type1.csv"
wilcox_list_out_p005=wilcox_list_out%>%dplyr::filter(pvalue<0.05)
wiocox_list=list (subtype_diff=wilcox_list_out_p005)
Out=perform_fgsea_analysis(wiocox_list,GMT_files)
FGSEA_subtype_list=Out[[1]]%>%as.data.frame()%>%dplyr::filter(pathway %in%Subtype_pathways)%>%arrange(NES)%>%mutate(Database=ifelse(grepl("HALLMARK",pathway),"Hallmark_dataset","C2_dataset"))%>%mutate(State=ifelse(pathway%in%c("WP_GLYCOLYSIS_AND_GLUCONEOGENESIS"        , "WP_MITOCHONDRIAL_LONG_CHAIN_FATTY_ACID_BETAOXIDATION"),"low pathways","high pathways"))
FGSEA_subtype_list$pathway=factor(FGSEA_subtype_list$pathway,unique(FGSEA_subtype_list$pathway))
FGSEA_subtype_list$Database=factor(FGSEA_subtype_list$Database,levels=c("Hallmark_dataset","C2_dataset"))
FGSEA_subtype_list$Group="Subtype2 vs subtype1"
Plot=Enrich_dotplot_bydataset(FGSEA_subtype_list)
write.csv(as.data.frame(FGSEA_subtype_list[,c(1:6)]),file=
file.path(Out_table_path,"CHKIRC_NES_subtype2_Vs_type1.csv" ),row.names = FALSE)
Plot
pathwaylist1= fgsea::gmtPathways(GMT_files[1])
pathwaylist2= fgsea::gmtPathways(GMT_files[2])
pathwaylist_all=c(pathwaylist1,pathwaylist2)
stats <- wilcox_list_out_p005$log2FoldChange
names(stats) <- rownames(wilcox_list_out_p005)
Enrichment_plot_list=list()
for (name in Subtype_pathways){
Pathway_name=name
P=fgsea::plotEnrichment(pathwaylist_all[[Pathway_name]], stats) + labs(title=Pathway_name)
Enrichment_plot_list[[name]]=P+theme_minimal() + theme(
axis.text.x = element_text(size = 18, angle = 0, hjust = 1, vjust = 1),
axis.text.y = element_text(size = 18),
legend.position = "none"
)
}
#
cowplot::plot_grid(plotlist = Enrichment_plot_list,ncol=4)
Ttest_list=list()
Subtype=unique(clinical_subtype$Subtype)%>%sort()
for ( i in Subtype){
samples=clinical_subtype%>%dplyr::filter(Subtype==i)%>%.$Sample_ID
Data=Pro_log_data%>%.[,samples]
Ttest=t(Data)%>%as.data.frame() %>%apply(2,function (x) (wilcox.test(x))$p.value )%>%unlist()%>%as.data.frame()%>%setNames("pvalue") %>%mutate(padj=p.adjust(pvalue))
Mean_log=t(Data)%>%as.data.frame()%>%apply(2,function (x) mean(x))
Ttest_padj005=Ttest %>% mutate(log2Foldchange=Mean_log) %>%dplyr::filter(padj<0.05)
Ttest_list[[i]]=Ttest %>% mutate(log2Foldchange=Mean_log)%>%mutate(gene_symbol=rownames(.))
}
#Hallmark and C2
Fgsea_output=list()
for ( i in names(Ttest_list) ){
res_p005=Ttest_list[[i]]%>%dplyr::filter(pvalue<0.05)
res_p005_rank=res_p005%>%arrange(log2Foldchange) %>%.[c("log2Foldchange")]%>%as.data.frame() %>%tibble::rownames_to_column()%>%na.omit()
ranks <- tibble::deframe(res_p005_rank)
fgsea_list=list()
for (k in GMT_files){
name=gsub(".*/","",k)
name2=gsub(".symbols.gmt.txt","",name)
pathway= fgsea::gmtPathways(k)
fgseaRes <- fgsea::fgseaMultilevel(pathway, ranks,
minSize=5,
maxSize=500,nPermSimple = 10000,eps = 0
)
fgsea_list[[name2]]=fgseaRes%>%mutate(Group=i)
}
Fgsea_output[[i]]=do.call("rbind",fgsea_list)
}
FGSEA_list=do.call("rbind",Fgsea_output)
FGSEA_list$Group=factor(FGSEA_list$Group)
names(Ttest_list)
FGSEA_subtype_list=FGSEA_list%>%as.data.frame()%>%dplyr::filter(pathway %in%Subtype_pathways)%>%arrange(NES)%>%mutate(Database=ifelse(grepl("HALLMARK",pathway),"Hallmark_dataset","C2_dataset"))%>%mutate(State=ifelse(pathway%in%c("WP_GLYCOLYSIS_AND_GLUCONEOGENESIS"        , "WP_MITOCHONDRIAL_LONG_CHAIN_FATTY_ACID_BETAOXIDATION"),"low pathways","high pathways"))%>%arrange(pathway)
FGSEA_subtype_list$pathway=factor(FGSEA_subtype_list$pathway,unique(FGSEA_subtype_list$pathway))
FGSEA_subtype_list$Database=factor(FGSEA_subtype_list$Database,levels=c("Hallmark_dataset","C2_dataset"))
Output_list=list()
for (i in unique(FGSEA_subtype_list$State)){
FGSEA_subtype_get=FGSEA_subtype_list%>%dplyr::filter(State==i)
Output_list[[i]] = Enrich_dotplot_bydataset(FGSEA_subtype_get)
}
cowplot::plot_grid(plotlist = Output_list,ncol=1)
write.csv(FGSEA_subtype_list[,c(1:6,9)],file.path(Out_table_path,"CHKIRC_subtype1_2_tumor_Vs_Normal_NES.csv"),row.names = F)
Group_set="CHKIRC_subtype1"
wilcox_list_out_p005=Ttest_list[[Group_set]]%>%dplyr::filter(pvalue<0.05)%>%dplyr::filter(!is.na(log2Foldchange))
stats <- wilcox_list_out_p005$log2Foldchange
names(stats) <- rownames(wilcox_list_out_p005)
Enrichment_plot_list=list()
for (name in Subtype_pathways){
Pathway_name=name
FGSEA_out=FGSEA_subtype_list%>%dplyr::filter(pathway==Pathway_name)%>%dplyr::filter(Group==Group_set)
NES_value=FGSEA_out$NES
padj_value=FGSEA_out$padj
# add \n to thte title
Title <- paste0(Pathway_name, "\nNES=", round(NES_value, 2), ", padj=", round(padj_value, 3))
P=fgsea::plotEnrichment(pathwaylist_all[[Pathway_name]], stats) + labs(title=Title)
Enrichment_plot_list[[name]]=P+theme_minimal() + theme(
axis.text.x = element_text(size = 18, angle = 0, hjust = 1, vjust = 1),
axis.text.y = element_text(size = 18),
legend.position = "none"
)
}
cowplot::plot_grid(plotlist = Enrichment_plot_list,ncol=4)
Group_set="CHKIRC_subtype2"
wilcox_list_out_p005=Ttest_list[[Group_set]]%>%dplyr::filter(pvalue<0.05)%>%dplyr::filter(!is.na(log2Foldchange))
stats <- wilcox_list_out_p005$log2Foldchange
names(stats) <- rownames(wilcox_list_out_p005)
Enrichment_plot_list=list()
for (name in Subtype_pathways){
Pathway_name=name
FGSEA_out=FGSEA_subtype_list%>%dplyr::filter(pathway==Pathway_name)%>%dplyr::filter(Group==Group_set)
NES_value=FGSEA_out$NES
padj_value=FGSEA_out$padj
# add \n to thte title
Title <- paste0(Pathway_name, "\nNES=", round(NES_value, 2), ", padj=", round(padj_value, 3))
P=fgsea::plotEnrichment(pathwaylist_all[[Pathway_name]], stats) + labs(title=Title)
Enrichment_plot_list[[name]]=P+theme_minimal() + theme(
axis.text.x = element_text(size = 18, angle = 0, hjust = 1, vjust = 1),
axis.text.y = element_text(size = 18),
legend.position = "none"
)
}
cowplot::plot_grid(plotlist = Enrichment_plot_list,ncol=4)
# save DEGs in tumor vs normal in subtype1 and 2
# filter ttest by pvalue<0.05 and log2FoldChange>0.27
Subtype1_DEGs=Ttest_list[[1]]%>%dplyr::filter(pvalue<0.05 )%>%dplyr::filter(log2Foldchange>0.27|log2Foldchange<as.numeric(-0.27))%>%.[,c("gene_symbol","log2Foldchange","pvalue")]
Subtype2_DEGs=Ttest_list[[2]]%>%dplyr::filter(pvalue<0.05 )%>%dplyr::filter(log2Foldchange>0.27|log2Foldchange<as.numeric(-0.27))%>%.[,c("gene_symbol","log2Foldchange","pvalue")]
# using excel to save Ttest_out_sig
library(openxlsx)
write.xlsx(Subtype1_DEGs,file.path(Out_table_path,"CHKIRC_subtype1_DEGs.xlsx"),sheetName = "Subtype1_tumor_vs_noraml_DEGs",row.names = F)
write.xlsx(Subtype2_DEGs,file.path(Out_table_path,"CHKIRC_subtype2_DEGs.xlsx"),sheetName = "Subtype2_tumor_vs_normal_DEGs",row.names = F)
library(openxlsx)
# Create workbook
wb <- createWorkbook()
# Subtype1 Sheet
addWorksheet(wb, sheetName = "Subtype1_tumor_vs_normal_DEGs")
writeData(wb, sheet = "Subtype1_tumor_vs_normal_DEGs",
x = "Significant DEGs for Subtype1 (Tumor vs Normal, pvalue < 0.05, |log2FoldChange| > 0.27)",
startRow = 1, colNames = FALSE)
writeData(wb, sheet = "Subtype1_tumor_vs_normal_DEGs",
x = Subtype1_DEGs, startRow = 2, rowNames = FALSE)
# Subtype2 Sheet
addWorksheet(wb, sheetName = "Subtype2_tumor_vs_normal_DEGs")
writeData(wb, sheet = "Subtype2_tumor_vs_normal_DEGs",
x = "Significant DEGs for Subtype2 (Tumor vs Normal, pvalue < 0.05, |log2FoldChange| > 0.27)",
startRow = 1, colNames = FALSE)
writeData(wb, sheet = "Subtype2_tumor_vs_normal_DEGs",
x = Subtype2_DEGs, startRow = 2, rowNames = FALSE)
# Save the workbook
saveWorkbook(wb, file = file.path(Out_table_path, "CHKIRC_all_subtypes_DEGs.xlsx"), overwrite = TRUE)
knitr::knit_exit()
knitr::opts_chunk$set(echo = F,include=F,message = F,warning = F)
erform_ttest_by_group
perform_ttest_by_group
# Define your own config
getwd()
config <- config::get(file = 'config.yml')
#
Working_path=config$Path
email=config$Email
Authtoken=config$Token_file
knitr::opts_chunk$set(echo = F,warnings =F, message=F,include=F)
options(knitr.table.format = 'markdown',encoding = 'UTF-8',warnings =F, message=F )
# Check and create output directory if it doesn't exist
output_dir <- file.path(Working_path, "Data_preparation")
if (!dir.exists(output_dir)) {
dir.create(output_dir, recursive = TRUE)
}
Reference_path=config$Reference_path
dir(Reference_path)
# load function
source("Rfunction.R" )
# laoding data 2025_06_MS170123_786KD-recalculate.xlsx
Path=Working_path
Rawdata_path=file.path(Path,"Rawdata")
Out_table_path=file.path(Path,"Out","table")
pathview_out=file.path(Rawdata_path,"Pathview")
Cellline_rawdata_path=file.path(Rawdata_path,"Cellline/Proteomics")
Reference_path="/Volumes/lyu.yang/MAC_1/R/Public_database/Reference"
dir(Cellline_rawdata_path)
Org_exp_file=file.path(Cellline_rawdata_path,"2025_06_MS170123_786KD-recalculate.xlsx")
# filtered by Score >2 and pepetide number >2
Exp_data_org=readxl::read_excel(Org_exp_file,sheet=1)%>%
# Extract the part that matches "GN=<Gene Name>"
mutate(Gene_name = stringr::str_extract(Description, "GN=\\w+"))%>%
mutate(Gene_name = stringr::str_replace(Gene_name, "GN=", ""))
colnames(Exp_data_org)=gsub("# ","",colnames(Exp_data_org))
colnames(Exp_data_org)=gsub(" ","_",colnames(Exp_data_org))
colnames(Exp_data_org)=gsub("\\/","_",colnames(Exp_data_org))
Pipetide_number=min(Exp_data_org$"# Unique Peptides")
Exp_data=Exp_data_org%>%.[,grepl("rep",colnames(.))]%>%mutate(Gene_name=Exp_data_org$Gene_name)%>%group_by(Gene_name)%>%summarise_all(mean)%>%as.data.frame()%>%matrix.please()
#
rows_with_na_or_zero <- Exp_data%>%as.data.frame() %>%
dplyr::filter(if_any(everything(), ~ is.na(.) | . == 0))
#
# View the rows that contain NA or 0 values
print(rows_with_na_or_zero)
print("remove these genes from the data")
#
Exp_data_rm_NA=Exp_data%>%na.omit()
Pro_log_data=log2(Exp_data_rm_NA)
library(dplyr)
perform_ttest_by_group <- function(clinical_data, Pro_log_data) {
# Create an empty list to store results
Ttest_list <- list()
# Get the unique sorted groups from the clinical data
Groups <- unique(clinical_data$Group) %>% sort()
# Loop through each group and perform t-tests
for (i in Groups) {
# Get the sample IDs for the current group
samples <- clinical_data %>%
dplyr::filter(Group == i) %>%
pull(Sample_ID)
# Subset the Pro_log_data based on these samples
Data <- Pro_log_data[, samples]
# Perform the t-test on each gene (row-wise t-tests)
Ttest <- t(Data) %>%
as.data.frame() %>%
apply(2, function(x) t.test(x)$p.value) %>%
unlist() %>%
as.data.frame() %>%
setNames("pvalue") %>%
mutate(padj = p.adjust(pvalue))  # Adjust p-values using FDR
# Calculate the mean log2 fold change for each gene
Mean_log <- t(Data) %>%
as.data.frame() %>%
apply(2, function(x) mean(x))
# Add log2 fold change and gene symbols to the results, then store in Ttest_list
Ttest_list[[i]] <- Ttest %>%
mutate(log2Foldchange = Mean_log, gene_symbol = rownames(.))
}
# Return the list of results
return(Ttest_list)
# Example usage:
# result <- perform_ttest_by_group(clinical_54_data_2, Pro_log_data)
}
Sample_anno=data.frame(Sample_ID=colnames(Exp_data))%>%mutate(Group=ifelse(grepl("KD1",Sample_ID),"sh1_group","sh3_group"))
Ttest_data=perform_ttest_by_group(Sample_anno ,Pro_log_data)
Ttest_data[[1]]%>%dplyr::filter(pvalue<0.01)
P1=Valcano_plot_FC_cut(Ttest_data[[1]],FC=1.2)
P2=Valcano_plot_FC_cut(Ttest_data[[2]],FC=1.2)
cowplot::plot_grid(P1,P2,labels = names(Ttest_data))
S1_DEGs=get_diff_expressed_genes(Ttest_data[[1]],FC=1.2)
S2_DEGs=get_diff_expressed_genes(Ttest_data[[2]],FC=1.2)
# Find common upregulated genes
common_upregulated_genes <- intersect(S1_DEGs$upregulated_genes, S2_DEGs$upregulated_genes)
# Find common downregulated genes
common_downregulated_genes <- intersect(S1_DEGs$downregulated_genes, S2_DEGs$downregulated_genes)
# Output the common upregulated and downregulated genes
list(
common_upregulated_genes = common_upregulated_genes,
common_downregulated_genes = common_downregulated_genes
)
All_sig=c(common_upregulated_genes,common_downregulated_genes )
Ttest_filter_1=Ttest_data[[1]]%>%dplyr::filter(gene_symbol%in%All_sig)
Ttest_filter_2=Ttest_data[[2]]%>%dplyr::filter(gene_symbol%in%All_sig)
P3=Valcano_plot_FC_cut(Ttest_filter_1,FC=1.2)
P4=Valcano_plot_FC_cut(Ttest_filter_2,FC=1.2)
cowplot::plot_grid(P3,P4,labels = names(Ttest_data))
GSEA_ref=file.path(Reference_path,"Human_GSEA")
GMT_files=list.files(file.path(Reference_path,"Human_GSEA"),pattern="v7.5.1.symbols.gmt.txt",full.names = T)%>%.[grepl("c2|h",.)]
Fgsea_output <- perform_fgsea_analysis(Ttest_list=Ttest_data, GMT_files, stat_value="pvalue")
Common_pathways=find_common_pathways(Fgsea_output)
Up_common_pathways=Common_pathways[[1]]
DN_common_pathways=Common_pathways[[2]]
Combined_up_pathways=combine_selected_pathways(Fgsea_output ,Up_common_pathways)%>%dplyr::filter(grepl("WP|HALLMARK|KEGG",pathway))
P5=Enrich_dotplot(Combined_up_pathways)
Combined_DN_pathways=combine_selected_pathways(Fgsea_output ,DN_common_pathways)%>%dplyr::filter(grepl("WP|HALLMARK|KEGG",pathway))
P6=Enrich_dotplot(Combined_DN_pathways)
All_sig_pathways=rbind(Combined_up_pathways,Combined_DN_pathways)%>%mutate(Database=ifelse(grepl("HALLMARK",pathway),"Hallmark_dataset","C2_dataset"))
P7=Enrich_dotplot_bydataset(All_sig_pathways)
cowplot::plot_grid(P7)
Sample_anno=data.frame(Sample_ID=colnames(Exp_data))%>%mutate(Group="Combination")
Ttest_data=perform_ttest_by_group(Sample_anno ,Pro_log_data)
write.csv(Ttest_data[[1]],file=file.path(Out_table_path,"shRNA_combination_Ttest.csv"),row.names = F)
Fgsea_output <- perform_fgsea_analysis(Ttest_list=Ttest_data, stat_value="pvalue",GMT_files)
write.csv(Fgsea_output[[1]][,c(1:6)],file=file.path(Out_table_path,"shRNA_combination_FGSEA.csv"),row.names = F)
All_sig_pathways=Fgsea_output[[1]]%>%mutate(Database=ifelse(grepl("HALLMARK",pathway),"Hallmark_dataset","C2_dataset"))%>%dplyr::filter(padj<0.05)%>%dplyr::filter(grepl("WP|HALLMARK|KEGG",pathway))%>%mutate(Group="Combination")
P8=Enrich_dotplot_bydataset(All_sig_pathways)
cowplot::plot_grid(P8)
pathwaylist1= fgsea::gmtPathways(GMT_files[1])
pathwaylist2= fgsea::gmtPathways(GMT_files[2])
pathwaylist_all=c(pathwaylist1,pathwaylist2)
stats <- wilcox_list_out_p005$log2FoldChange
wilcox_list_out_p005
Ttest_data
stats <- Ttest_data[[2]]
Ttest_data[[2]]
stats <- Ttest_data[[1]]
stats
perform_fgsea_analysis
stats <- Ttest_data[[1]]%>%dplyr::filter(pvalue<0.05)%>%.$log2Foldchange
stats
Combined_up_pathways
GSEA_ref=file.path(Reference_path,"Human_GSEA")
GMT_files=list.files(file.path(Reference_path,"Human_GSEA"),pattern="v7.5.1.symbols.gmt.txt",full.names = T)%>%.[grepl("c2|h",.)]
Fgsea_output <- perform_fgsea_analysis(Ttest_list=Ttest_data, GMT_files, stat_value="pvalue")
Common_pathways=find_common_pathways(Fgsea_output)
Up_common_pathways=Common_pathways[[1]]
DN_common_pathways=Common_pathways[[2]]
Combined_up_pathways=combine_selected_pathways(Fgsea_output ,Up_common_pathways)%>%dplyr::filter(grepl("WP|HALLMARK,pathway))
P5=Enrich_dotplot(Combined_up_pathways)
Combined_DN_pathways=combine_selected_pathways(Fgsea_output ,DN_common_pathways)%>%dplyr::filter(grepl("WP|HALLMARK|KEGG",pathway))
GSEA_ref=file.path(Reference_path,"Human_GSEA")
GMT_files=list.files(file.path(Reference_path,"Human_GSEA"),pattern="v7.5.1.symbols.gmt.txt",full.names = T)%>%.[grepl("c2|h",.)]
Fgsea_output <- perform_fgsea_analysis(Ttest_list=Ttest_data, GMT_files, stat_value="pvalue")
Common_pathways=find_common_pathways(Fgsea_output)
Up_common_pathways=Common_pathways[[1]]
DN_common_pathways=Common_pathways[[2]]
Combined_up_pathways=combine_selected_pathways(Fgsea_output ,Up_common_pathways)%>%dplyr::filter(grepl("WP|HALLMARK",pathway))
P5=Enrich_dotplot(Combined_up_pathways)
Combined_DN_pathways=combine_selected_pathways(Fgsea_output ,DN_common_pathways)%>%dplyr::filter(grepl("WP|HALLMARK|KEGG",pathway))
P6=Enrich_dotplot(Combined_DN_pathways)
All_sig_pathways=rbind(Combined_up_pathways,Combined_DN_pathways)%>%mutate(Database=ifelse(grepl("HALLMARK",pathway),"Hallmark_dataset","C2_dataset"))
P7=Enrich_dotplot_bydataset(All_sig_pathways)
Combined_up_pathways
Pathways_pickpu=Combined_up_pathways$pathway
Pathways_pickup=Combined_up_pathways$pathway
Pathways_pickup
GSEA_ref=file.path(Reference_path,"Human_GSEA")
GMT_files=list.files(file.path(Reference_path,"Human_GSEA"),pattern="v7.5.1.symbols.gmt.txt",full.names = T)%>%.[grepl("c2|h",.)]
Fgsea_output <- perform_fgsea_analysis(Ttest_list=Ttest_data, GMT_files, stat_value="pvalue")
Common_pathways=find_common_pathways(Fgsea_output)
Up_common_pathways=Common_pathways[[1]]
DN_common_pathways=Common_pathways[[2]]
Combined_up_pathways=combine_selected_pathways(Fgsea_output ,Up_common_pathways)%>%dplyr::filter(grepl("WP|HALLMARK",pathway))
P5=Enrich_dotplot(Combined_up_pathways)
Combined_DN_pathways=combine_selected_pathways(Fgsea_output ,DN_common_pathways)%>%dplyr::filter(grepl("WP|HALLMARK|KEGG",pathway))
P6=Enrich_dotplot(Combined_DN_pathways)
All_sig_pathways=rbind(Combined_up_pathways,Combined_DN_pathways)%>%mutate(Database=ifelse(grepl("HALLMARK",pathway),"Hallmark_dataset","C2_dataset"))
P7=Enrich_dotplot_bydataset(All_sig_pathways)
cowplot::plot_grid(P7)
All_sig_pathways
GSEA_ref=file.path(Reference_path,"Human_GSEA")
GMT_files=list.files(file.path(Reference_path,"Human_GSEA"),pattern="v7.5.1.symbols.gmt.txt",full.names = T)%>%.[grepl("c2|h",.)]
Fgsea_output <- perform_fgsea_analysis(Ttest_list=Ttest_data, GMT_files, stat_value="pvalue")
Common_pathways=find_common_pathways(Fgsea_output)
Up_common_pathways=Common_pathways[[1]]
DN_common_pathways=Common_pathways[[2]]
Combined_up_pathways=combine_selected_pathways(Fgsea_output ,Up_common_pathways)
P5=Enrich_dotplot(Combined_up_pathways)
Combined_DN_pathways=combine_selected_pathways(Fgsea_output ,DN_common_pathways)%>%dplyr::filter(grepl("WP|HALLMARK|KEGG",pathway))
P6=Enrich_dotplot(Combined_DN_pathways)
All_sig_pathways=rbind(Combined_up_pathways,Combined_DN_pathways)%>%mutate(Database=ifelse(grepl("HALLMARK",pathway),"Hallmark_dataset","C2_dataset"))%>%dplyr::filter(grepl("WP|HALLMARK",pathway))
P7=Enrich_dotplot_bydataset(All_sig_pathways)
cowplot::plot_grid(P7)
Sample_anno=data.frame(Sample_ID=colnames(Exp_data))%>%mutate(Group="Combination")
Ttest_data=perform_ttest_by_group(Sample_anno ,Pro_log_data)
write.csv(Ttest_data[[1]],file=file.path(Out_table_path,"shRNA_combination_Ttest.csv"),row.names = F)
Fgsea_output <- perform_fgsea_analysis(Ttest_list=Ttest_data, stat_value="pvalue",GMT_files)
write.csv(Fgsea_output[[1]][,c(1:6)],file=file.path(Out_table_path,"shRNA_combination_FGSEA.csv"),row.names = F)
All_sig_pathways=Fgsea_output[[1]]%>%mutate(Database=ifelse(grepl("HALLMARK",pathway),"Hallmark_dataset","C2_dataset"))%>%dplyr::filter(padj<0.05)%>%dplyr::filter(grepl("WP|HALLMARK|KEGG",pathway))%>%mutate(Group="Combination")
P8=Enrich_dotplot_bydataset(All_sig_pathways)
Sample_anno=data.frame(Sample_ID=colnames(Exp_data))%>%mutate(Group="Combination")
Ttest_data=perform_ttest_by_group(Sample_anno ,Pro_log_data)
write.csv(Ttest_data[[1]],file=file.path(Out_table_path,"shRNA_combination_Ttest.csv"),row.names = F)
Fgsea_output <- perform_fgsea_analysis(Ttest_list=Ttest_data, stat_value="pvalue",GMT_files)
write.csv(Fgsea_output[[1]][,c(1:6)],file=file.path(Out_table_path,"shRNA_combination_FGSEA.csv"),row.names = F)
All_sig_pathways=Fgsea_output[[1]]%>%mutate(Database=ifelse(grepl("HALLMARK",pathway),"Hallmark_dataset","C2_dataset"))%>%dplyr::filter(padj<0.05)%>%dplyr::filter(grepl("WP|HALLMARK",pathway))%>%mutate(Group="Combination")
P8=Enrich_dotplot_bydataset(All_sig_pathways)
cowplot::plot_grid(P8)
All_sig_pathways$pathway
All_sig_pathways$pathway
pathwaylist1= fgsea::gmtPathways(GMT_files[1])
pathwaylist2= fgsea::gmtPathways(GMT_files[2])
pathwaylist_all=c(pathwaylist1,pathwaylist2)
stats <- Ttest_data[[1]]%>%dplyr::filter(pvalue<0.05)%>%.$log2Foldchange
names(stats) <- rownames(wilcox_list_out_p005)
stats
pathwaylist1= fgsea::gmtPathways(GMT_files[1])
pathwaylist2= fgsea::gmtPathways(GMT_files[2])
pathwaylist_all=c(pathwaylist1,pathwaylist2)
stats <- Ttest_data[[1]]%>%dplyr::filter(pvalue<0.05)%>%.$log2Foldchange
#names(stats) <- rownames(wilcox_list_out_p005)
Pathways_pickup=c("HALLMARK_OXIDATIVE_PHOSPHORYLATION","HALLMARK_MYOGENESIS","HALLMARK_EPITHELIAL_MESENCHYMAL_TRANSITION" ,"HALLMARK_E2F_TARGETS","WP_INTEGRATED_CANCER_PATHWAY"  )
Enrichment_plot_list=list()
for (name in Pathways_pickup){
Pathway_name=name
P=fgsea::plotEnrichment(pathwaylist_all[[Pathway_name]], stats) + labs(title=Pathway_name)
Enrichment_plot_list[[name]]=P+theme_minimal() + theme(
axis.text.x = element_text(size = 18, angle = 0, hjust = 1, vjust = 1),
axis.text.y = element_text(size = 18),
legend.position = "none"
)
}
#
cowplot::plot_grid(plotlist = Enrichment_plot_list,ncol=4)
cowplot::plot_grid(plotlist = Enrichment_plot_list,ncol=3)
All_sig_pathways$pathway
pathwaylist1= fgsea::gmtPathways(GMT_files[1])
pathwaylist2= fgsea::gmtPathways(GMT_files[2])
pathwaylist_all=c(pathwaylist1,pathwaylist2)
stats <- Ttest_data[[1]]%>%dplyr::filter(pvalue<0.05)%>%.$log2Foldchange
#names(stats) <- rownames(wilcox_list_out_p005)
Pathways_pickup=c("HALLMARK_OXIDATIVE_PHOSPHORYLATION","HALLMARK_E2F_TARGETS","WP_INTEGRATED_CANCER_PATHWAY","HALLMARK_MYOGENESIS","HALLMARK_EPITHELIAL_MESENCHYMAL_TRANSITION" ,"HALLMARK_IL2_STAT5_SIGNALING"  )
Enrichment_plot_list=list()
for (name in Pathways_pickup){
Pathway_name=name
P=fgsea::plotEnrichment(pathwaylist_all[[Pathway_name]], stats) + labs(title=Pathway_name)
Enrichment_plot_list[[name]]=P+theme_minimal() + theme(
axis.text.x = element_text(size = 18, angle = 0, hjust = 1, vjust = 1),
axis.text.y = element_text(size = 18),
legend.position = "none"
)
}
#
cowplot::plot_grid(plotlist = Enrichment_plot_list,ncol=3)
